
-- üîê Script ofuscado por ZENIHT
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
function dec(data)local d,m,n="",0,0;data=data:gsub("[^%w%+%/%=]","")while m<#data do local a,b,c=(b:find(data:sub(m+1,m+1))-1),(b:find(data:sub(m+2,m+2))-1),(b:find(data:sub(m+3,m+3))-1)local d1=(a<<2)|((b>>4)&3)local d2=((b&15)<<4)|((c>>2)&15)local d3=((c&3)<<6)|(b:find(data:sub(m+4,m+4))-1)d=d..string.char(d1)if data:sub(m+3,m+3)~='=' then d=d..string.char(d2) end if data:sub(m+4,m+4)~='=' then d=d..string.char(d3) end m=m+4 end return d end
loadstring(dec(""))()
